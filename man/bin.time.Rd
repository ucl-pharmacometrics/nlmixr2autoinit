% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bin.time.R
\name{bin.time}
\alias{bin.time}
\title{Bin time-concentration data using quantile or algorithmic binning}
\usage{
bin.time(
  dat,
  nbins = "auto",
  bin.method = c("quantile", "jenks", "kmeans", "pretty", "sd", "equal", "density")
)
}
\arguments{
\item{dat}{A data frame containing PK data. Must include:
\itemize{
\item tad: time after dose
\item DVstd: standardized concentration (e.g., DV/dose)
\item EVID: optional event ID column used to filter observations (EVID == 0)
}}

\item{nbins}{Number of bins or "auto".
If a numeric value is provided (e.g., 8) and bin.method = "quantile",
that number of equal-frequency bins is used.
When "auto" is specified:
for bin.method = "quantile", 10 bins (deciles) are used;
for other methods, bin count selection is delegated to
vpc::auto_bin (type = bin.method, n_bins = "auto").
If a numeric nbins is supplied with non-quantile methods,
it is passed to vpc::auto_bin as the target number of bins.}

\item{bin.method}{Binning strategy (default = "quantile").
Available options are:
\itemize{
\item quantile: equal-frequency binning by empirical quantiles
\item jenks: natural breaks minimizing within-bin variance
\item kmeans, pretty, sd, equal, density: alternative binning
methods from vpc::auto_bin
}}
}
\value{
A list containing:
\describe{
\item{binned.df}{Data frame of median time and concentration per bin}
\item{bin_limits.df}{Data frame with upper time boundary for each bin}
\item{breaks}{Breakpoints used to define time bins}
\item{method_used}{Binning method used}
\item{nbins_final}{Final number of bins (length of breaks - 1)}
}
}
\description{
Bins data by time, using either equal-frequency (quantile)
binning or algorithmic methods supported by the \code{vpc} package
}
\details{
Supports quantile-based and adaptive (VPC-style) binning methods,
with optional automatic determination of the number of bins.
}
\examples{
dat <- Bolus_1CPT
dat <- nmpkconvert(dat)
dat <- calculate_tad(dat)
dat$DVstd <- dat$DV / dat$dose
bin.time(dat)

}
